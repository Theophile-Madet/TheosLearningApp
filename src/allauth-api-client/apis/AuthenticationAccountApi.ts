/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
	AuthenticatedResponse,
	AuthenticationResponse,
	EmailVerificationInfo,
	ErrorResponse,
	ForbiddenResponse,
	Login,
	Reauthenticate,
	Signup,
	VerifyEmail
} from '../models/index';
import {
	AuthenticatedResponseFromJSON,
	AuthenticatedResponseToJSON,
	AuthenticationResponseFromJSON,
	AuthenticationResponseToJSON,
	EmailVerificationInfoFromJSON,
	EmailVerificationInfoToJSON,
	ErrorResponseFromJSON,
	ErrorResponseToJSON,
	ForbiddenResponseFromJSON,
	ForbiddenResponseToJSON,
	LoginFromJSON,
	LoginToJSON,
	ReauthenticateFromJSON,
	ReauthenticateToJSON,
	SignupFromJSON,
	SignupToJSON,
	VerifyEmailFromJSON,
	VerifyEmailToJSON
} from '../models/index';

export interface AllauthClientV1AuthEmailVerifyGetRequest {
	xEmailVerificationKey: string;
	client: AllauthClientV1AuthEmailVerifyGetClientEnum;
}

export interface AllauthClientV1AuthEmailVerifyPostRequest {
	client: AllauthClientV1AuthEmailVerifyPostClientEnum;
	xSessionToken?: string;
	verifyEmail?: VerifyEmail;
}

export interface AllauthClientV1AuthLoginPostRequest {
	client: AllauthClientV1AuthLoginPostClientEnum;
	login: Login;
}

export interface AllauthClientV1AuthReauthenticatePostRequest {
	client: AllauthClientV1AuthReauthenticatePostClientEnum;
	reauthenticate: Reauthenticate;
	xSessionToken?: string;
}

export interface AllauthClientV1AuthSignupPostRequest {
	client: AllauthClientV1AuthSignupPostClientEnum;
	signup: Signup;
}

/**
 *
 */
export class AuthenticationAccountApi extends runtime.BaseAPI {

	/**
	 * Obtain email verification information, given the token that was sent to the user by email.
	 * Get email verification information
	 */
	async allauthClientV1AuthEmailVerifyGetRaw(requestParameters: AllauthClientV1AuthEmailVerifyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailVerificationInfo>> {
		if (requestParameters['xEmailVerificationKey'] == null) {
			throw new runtime.RequiredError(
				'xEmailVerificationKey',
				'Required parameter "xEmailVerificationKey" was null or undefined when calling allauthClientV1AuthEmailVerifyGet().'
			);
		}

		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AuthEmailVerifyGet().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (requestParameters['xEmailVerificationKey'] != null) {
			headerParameters['X-Email-Verification-Key'] = String(requestParameters['xEmailVerificationKey']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/auth/email/verify`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'GET',
			headers: headerParameters,
			query: queryParameters
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => EmailVerificationInfoFromJSON(jsonValue));
	}

	/**
	 * Obtain email verification information, given the token that was sent to the user by email.
	 * Get email verification information
	 */
	async allauthClientV1AuthEmailVerifyGet(requestParameters: AllauthClientV1AuthEmailVerifyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailVerificationInfo> {
		const response = await this.allauthClientV1AuthEmailVerifyGetRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Complete the email verification process.
	 * Verify an email
	 */
	async allauthClientV1AuthEmailVerifyPostRaw(requestParameters: AllauthClientV1AuthEmailVerifyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AuthEmailVerifyPost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/auth/email/verify`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: VerifyEmailToJSON(requestParameters['verifyEmail'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
	}

	/**
	 * Complete the email verification process.
	 * Verify an email
	 */
	async allauthClientV1AuthEmailVerifyPost(requestParameters: AllauthClientV1AuthEmailVerifyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
		const response = await this.allauthClientV1AuthEmailVerifyPostRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Login using a username-password or email-password combination.
	 * Login
	 */
	async allauthClientV1AuthLoginPostRaw(requestParameters: AllauthClientV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AuthLoginPost().'
			);
		}

		if (requestParameters['login'] == null) {
			throw new runtime.RequiredError(
				'login',
				'Required parameter "login" was null or undefined when calling allauthClientV1AuthLoginPost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request({
			path: `/_allauth/{client}/v1/auth/login`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: LoginToJSON(requestParameters['login'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
	}

	/**
	 * Login using a username-password or email-password combination.
	 * Login
	 */
	async allauthClientV1AuthLoginPost(requestParameters: AllauthClientV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
		const response = await this.allauthClientV1AuthLoginPostRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * In order to safeguard the account, some actions require the user to be recently authenticated.  If you try to perform such an action without having been recently authenticated, a `401` status is returned, listing flows that can be performed to reauthenticate. One such flow is the flow with ID `reauthenticate`, which allows for the user to input the password. This is the endpoint related towards that flow.
	 * Reauthenticate
	 */
	async allauthClientV1AuthReauthenticatePostRaw(requestParameters: AllauthClientV1AuthReauthenticatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AuthReauthenticatePost().'
			);
		}

		if (requestParameters['reauthenticate'] == null) {
			throw new runtime.RequiredError(
				'reauthenticate',
				'Required parameter "reauthenticate" was null or undefined when calling allauthClientV1AuthReauthenticatePost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/auth/reauthenticate`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: ReauthenticateToJSON(requestParameters['reauthenticate'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
	}

	/**
	 * In order to safeguard the account, some actions require the user to be recently authenticated.  If you try to perform such an action without having been recently authenticated, a `401` status is returned, listing flows that can be performed to reauthenticate. One such flow is the flow with ID `reauthenticate`, which allows for the user to input the password. This is the endpoint related towards that flow.
	 * Reauthenticate
	 */
	async allauthClientV1AuthReauthenticatePost(requestParameters: AllauthClientV1AuthReauthenticatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
		const response = await this.allauthClientV1AuthReauthenticatePostRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Whether or not `username`, `email`, or both are required depends on the configuration of django-allauth. Additionally, if a custom signup form is used there may be other custom properties required.
	 * Signup
	 */
	async allauthClientV1AuthSignupPostRaw(requestParameters: AllauthClientV1AuthSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AuthSignupPost().'
			);
		}

		if (requestParameters['signup'] == null) {
			throw new runtime.RequiredError(
				'signup',
				'Required parameter "signup" was null or undefined when calling allauthClientV1AuthSignupPost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request({
			path: `/_allauth/{client}/v1/auth/signup`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: SignupToJSON(requestParameters['signup'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
	}

	/**
	 * Whether or not `username`, `email`, or both are required depends on the configuration of django-allauth. Additionally, if a custom signup form is used there may be other custom properties required.
	 * Signup
	 */
	async allauthClientV1AuthSignupPost(requestParameters: AllauthClientV1AuthSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
		const response = await this.allauthClientV1AuthSignupPostRaw(requestParameters, initOverrides);
		return await response.value();
	}

}

/**
 * @export
 */
export const AllauthClientV1AuthEmailVerifyGetClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AuthEmailVerifyGetClientEnum = typeof AllauthClientV1AuthEmailVerifyGetClientEnum[keyof typeof AllauthClientV1AuthEmailVerifyGetClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthEmailVerifyPostClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AuthEmailVerifyPostClientEnum = typeof AllauthClientV1AuthEmailVerifyPostClientEnum[keyof typeof AllauthClientV1AuthEmailVerifyPostClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthLoginPostClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AuthLoginPostClientEnum = typeof AllauthClientV1AuthLoginPostClientEnum[keyof typeof AllauthClientV1AuthLoginPostClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthReauthenticatePostClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AuthReauthenticatePostClientEnum = typeof AllauthClientV1AuthReauthenticatePostClientEnum[keyof typeof AllauthClientV1AuthReauthenticatePostClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthSignupPostClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AuthSignupPostClientEnum = typeof AllauthClientV1AuthSignupPostClientEnum[keyof typeof AllauthClientV1AuthSignupPostClientEnum];
