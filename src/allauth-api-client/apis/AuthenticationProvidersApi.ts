/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type { AuthenticatedResponse, Process, ProviderSignup, ProviderToken } from '../models/index';
import {
	AuthenticatedResponseFromJSON,
	ProcessToJSON,
	ProviderSignupToJSON,
	ProviderTokenToJSON
} from '../models/index';

export interface AllauthBrowserV1AuthProviderRedirectPostRequest {
	provider: string;
	callbackUrl: string;
	process: Process;
}

export interface AllauthClientV1AuthProviderSignupPostRequest {
	client: AllauthClientV1AuthProviderSignupPostClientEnum;
	providerSignup: ProviderSignup;
}

export interface AllauthClientV1AuthProviderTokenPostRequest {
	client: AllauthClientV1AuthProviderTokenPostClientEnum;
	providerToken: ProviderToken;
	xSessionToken?: string;
}

/**
 *
 */
export class AuthenticationProvidersApi extends runtime.BaseAPI {

	/**
	 * Initiates the third-party provider authentication redirect flow. As calling this endpoint results in a user facing redirect (302), this call is only available in a browser, and must be called in a synchronous (non-XHR) manner.
	 * Provider redirect
	 */
	async allauthBrowserV1AuthProviderRedirectPostRaw(requestParameters: AllauthBrowserV1AuthProviderRedirectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
		if (requestParameters['provider'] == null) {
			throw new runtime.RequiredError(
				'provider',
				'Required parameter "provider" was null or undefined when calling allauthBrowserV1AuthProviderRedirectPost().'
			);
		}

		if (requestParameters['callbackUrl'] == null) {
			throw new runtime.RequiredError(
				'callbackUrl',
				'Required parameter "callbackUrl" was null or undefined when calling allauthBrowserV1AuthProviderRedirectPost().'
			);
		}

		if (requestParameters['process'] == null) {
			throw new runtime.RequiredError(
				'process',
				'Required parameter "process" was null or undefined when calling allauthBrowserV1AuthProviderRedirectPost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const consumes: runtime.Consume[] = [
			{ contentType: 'application/x-www-form-urlencoded' }
		];
		// @ts-ignore: canConsumeForm may be unused
		const canConsumeForm = runtime.canConsumeForm(consumes);

		let formParams: { append(param: string, value: any): any };
		let useForm = false;
		if (useForm) {
			formParams = new FormData();
		} else {
			formParams = new URLSearchParams();
		}

		if (requestParameters['provider'] != null) {
			formParams.append('provider', requestParameters['provider'] as any);
		}

		if (requestParameters['callbackUrl'] != null) {
			formParams.append('callback_url', requestParameters['callbackUrl'] as any);
		}

		if (requestParameters['process'] != null) {
			formParams.append('process', new Blob([JSON.stringify(ProcessToJSON(requestParameters['process']))], { type: 'application/json' }));
		}

		const response = await this.request({
			path: `/_allauth/browser/v1/auth/provider/redirect`,
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: formParams
		}, initOverrides);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Initiates the third-party provider authentication redirect flow. As calling this endpoint results in a user facing redirect (302), this call is only available in a browser, and must be called in a synchronous (non-XHR) manner.
	 * Provider redirect
	 */
	async allauthBrowserV1AuthProviderRedirectPost(requestParameters: AllauthBrowserV1AuthProviderRedirectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
		await this.allauthBrowserV1AuthProviderRedirectPostRaw(requestParameters, initOverrides);
	}

	/**
	 * If, while signing up using a third-party provider account, there is insufficient information received from the provider to automatically complete the signup process, an additional step is needed to complete the missing data before the user is fully signed up and authenticated.
	 * Provider signup
	 */
	async allauthClientV1AuthProviderSignupPostRaw(requestParameters: AllauthClientV1AuthProviderSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AuthProviderSignupPost().'
			);
		}

		if (requestParameters['providerSignup'] == null) {
			throw new runtime.RequiredError(
				'providerSignup',
				'Required parameter "providerSignup" was null or undefined when calling allauthClientV1AuthProviderSignupPost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request({
			path: `/_allauth/{client}/v1/auth/provider/signup`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: ProviderSignupToJSON(requestParameters['providerSignup'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
	}

	/**
	 * If, while signing up using a third-party provider account, there is insufficient information received from the provider to automatically complete the signup process, an additional step is needed to complete the missing data before the user is fully signed up and authenticated.
	 * Provider signup
	 */
	async allauthClientV1AuthProviderSignupPost(requestParameters: AllauthClientV1AuthProviderSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
		const response = await this.allauthClientV1AuthProviderSignupPostRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Authenticates with a third-party provider using provider tokens received by other means. For example, in case of a mobile app, the authentication flow runs completely on the device itself, without any interaction with the API. Then, when the (device) authentication completes and the mobile app receives an access and/or ID token, it can hand over these tokens via this endpoint to authenticate on the server.
	 * Provider token
	 */
	async allauthClientV1AuthProviderTokenPostRaw(requestParameters: AllauthClientV1AuthProviderTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AuthProviderTokenPost().'
			);
		}

		if (requestParameters['providerToken'] == null) {
			throw new runtime.RequiredError(
				'providerToken',
				'Required parameter "providerToken" was null or undefined when calling allauthClientV1AuthProviderTokenPost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/auth/provider/token`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: ProviderTokenToJSON(requestParameters['providerToken'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
	}

	/**
	 * Authenticates with a third-party provider using provider tokens received by other means. For example, in case of a mobile app, the authentication flow runs completely on the device itself, without any interaction with the API. Then, when the (device) authentication completes and the mobile app receives an access and/or ID token, it can hand over these tokens via this endpoint to authenticate on the server.
	 * Provider token
	 */
	async allauthClientV1AuthProviderTokenPost(requestParameters: AllauthClientV1AuthProviderTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
		const response = await this.allauthClientV1AuthProviderTokenPostRaw(requestParameters, initOverrides);
		return await response.value();
	}

}

/**
 * @export
 */
export const AllauthClientV1AuthProviderSignupPostClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AuthProviderSignupPostClientEnum = typeof AllauthClientV1AuthProviderSignupPostClientEnum[keyof typeof AllauthClientV1AuthProviderSignupPostClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthProviderTokenPostClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AuthProviderTokenPostClientEnum = typeof AllauthClientV1AuthProviderTokenPostClientEnum[keyof typeof AllauthClientV1AuthProviderTokenPostClientEnum];
