/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
	AllauthClientV1AccountEmailGet200Response,
	AllauthClientV1AccountEmailPatchRequest,
	AllauthClientV1AccountEmailPost401Response,
	AllauthClientV1AccountEmailPutRequest,
	AllauthClientV1AuthPasswordRequestPost200Response,
	AuthenticationResponse,
	ErrorResponse,
	ForbiddenResponse
} from '../models/index';
import {
	AllauthClientV1AccountEmailGet200ResponseFromJSON,
	AllauthClientV1AccountEmailGet200ResponseToJSON,
	AllauthClientV1AccountEmailPatchRequestFromJSON,
	AllauthClientV1AccountEmailPatchRequestToJSON,
	AllauthClientV1AccountEmailPost401ResponseFromJSON,
	AllauthClientV1AccountEmailPost401ResponseToJSON,
	AllauthClientV1AccountEmailPutRequestFromJSON,
	AllauthClientV1AccountEmailPutRequestToJSON,
	AllauthClientV1AuthPasswordRequestPost200ResponseFromJSON,
	AllauthClientV1AuthPasswordRequestPost200ResponseToJSON,
	AuthenticationResponseFromJSON,
	AuthenticationResponseToJSON,
	ErrorResponseFromJSON,
	ErrorResponseToJSON,
	ForbiddenResponseFromJSON,
	ForbiddenResponseToJSON
} from '../models/index';

export interface AllauthClientV1AccountEmailDeleteRequest {
	client: AllauthClientV1AccountEmailDeleteClientEnum;
	xSessionToken?: string;
	allauthClientV1AccountEmailPutRequest?: AllauthClientV1AccountEmailPutRequest;
}

export interface AllauthClientV1AccountEmailGetRequest {
	client: AllauthClientV1AccountEmailGetClientEnum;
	xSessionToken?: string;
}

export interface AllauthClientV1AccountEmailPatchOperationRequest {
	client: AllauthClientV1AccountEmailPatchClientEnum;
	xSessionToken?: string;
	allauthClientV1AccountEmailPatchRequest?: AllauthClientV1AccountEmailPatchRequest;
}

export interface AllauthClientV1AccountEmailPostRequest {
	client: AllauthClientV1AccountEmailPostClientEnum;
	xSessionToken?: string;
	allauthClientV1AccountEmailPutRequest?: AllauthClientV1AccountEmailPutRequest;
}

export interface AllauthClientV1AccountEmailPutOperationRequest {
	client: AllauthClientV1AccountEmailPutClientEnum;
	xSessionToken?: string;
	allauthClientV1AccountEmailPutRequest?: AllauthClientV1AccountEmailPutRequest;
}

/**
 * 
 */
export class AccountEmailApi extends runtime.BaseAPI {

	/**
	 * Used to remove an email address.
	 * Remove an email address
	 */
	async allauthClientV1AccountEmailDeleteRaw(requestParameters: AllauthClientV1AccountEmailDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AccountEmailGet200Response>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AccountEmailDelete().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/account/email`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'DELETE',
			headers: headerParameters,
			query: queryParameters,
			body: AllauthClientV1AccountEmailPutRequestToJSON(requestParameters['allauthClientV1AccountEmailPutRequest'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AccountEmailGet200ResponseFromJSON(jsonValue));
	}

	/**
	 * Used to remove an email address.
	 * Remove an email address
	 */
	async allauthClientV1AccountEmailDelete(requestParameters: AllauthClientV1AccountEmailDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AccountEmailGet200Response> {
		const response = await this.allauthClientV1AccountEmailDeleteRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Retrieves the list of email addreses of the account.
	 * List email addresses
	 */
	async allauthClientV1AccountEmailGetRaw(requestParameters: AllauthClientV1AccountEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AccountEmailGet200Response>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AccountEmailGet().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/account/email`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'GET',
			headers: headerParameters,
			query: queryParameters
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AccountEmailGet200ResponseFromJSON(jsonValue));
	}

	/**
	 * Retrieves the list of email addreses of the account.
	 * List email addresses
	 */
	async allauthClientV1AccountEmailGet(requestParameters: AllauthClientV1AccountEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AccountEmailGet200Response> {
		const response = await this.allauthClientV1AccountEmailGetRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Used to change primary email address to a different one. Note that only verified email addresses can be marked as primary.
	 * Change primary email address
	 */
	async allauthClientV1AccountEmailPatchRaw(requestParameters: AllauthClientV1AccountEmailPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AccountEmailGet200Response>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AccountEmailPatch().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/account/email`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'PATCH',
			headers: headerParameters,
			query: queryParameters,
			body: AllauthClientV1AccountEmailPatchRequestToJSON(requestParameters['allauthClientV1AccountEmailPatchRequest'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AccountEmailGet200ResponseFromJSON(jsonValue));
	}

	/**
	 * Used to change primary email address to a different one. Note that only verified email addresses can be marked as primary.
	 * Change primary email address
	 */
	async allauthClientV1AccountEmailPatch(requestParameters: AllauthClientV1AccountEmailPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AccountEmailGet200Response> {
		const response = await this.allauthClientV1AccountEmailPatchRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Add a new email address to the account. The email address will be marked as unverified, and an email verification mail will be sent.
	 * Add an email addresses
	 */
	async allauthClientV1AccountEmailPostRaw(requestParameters: AllauthClientV1AccountEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AccountEmailGet200Response>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AccountEmailPost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/account/email`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: AllauthClientV1AccountEmailPutRequestToJSON(requestParameters['allauthClientV1AccountEmailPutRequest'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AccountEmailGet200ResponseFromJSON(jsonValue));
	}

	/**
	 * Add a new email address to the account. The email address will be marked as unverified, and an email verification mail will be sent.
	 * Add an email addresses
	 */
	async allauthClientV1AccountEmailPost(requestParameters: AllauthClientV1AccountEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AccountEmailGet200Response> {
		const response = await this.allauthClientV1AccountEmailPostRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Requests for (another) email verification email to be sent. Note that sending emails is rate limited, so when you send too many requests the email will not be sent.
	 * Request email verification
	 */
	async allauthClientV1AccountEmailPutRaw(requestParameters: AllauthClientV1AccountEmailPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AuthPasswordRequestPost200Response>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AccountEmailPut().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/account/email`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'PUT',
			headers: headerParameters,
			query: queryParameters,
			body: AllauthClientV1AccountEmailPutRequestToJSON(requestParameters['allauthClientV1AccountEmailPutRequest'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AuthPasswordRequestPost200ResponseFromJSON(jsonValue));
	}

	/**
	 * Requests for (another) email verification email to be sent. Note that sending emails is rate limited, so when you send too many requests the email will not be sent.
	 * Request email verification
	 */
	async allauthClientV1AccountEmailPut(requestParameters: AllauthClientV1AccountEmailPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AuthPasswordRequestPost200Response> {
		const response = await this.allauthClientV1AccountEmailPutRaw(requestParameters, initOverrides);
		return await response.value();
	}

}

/**
 * @export
 */
export const AllauthClientV1AccountEmailDeleteClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AccountEmailDeleteClientEnum = typeof AllauthClientV1AccountEmailDeleteClientEnum[keyof typeof AllauthClientV1AccountEmailDeleteClientEnum];
/**
 * @export
 */
export const AllauthClientV1AccountEmailGetClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AccountEmailGetClientEnum = typeof AllauthClientV1AccountEmailGetClientEnum[keyof typeof AllauthClientV1AccountEmailGetClientEnum];
/**
 * @export
 */
export const AllauthClientV1AccountEmailPatchOperationClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AccountEmailPatchOperationClientEnum = typeof AllauthClientV1AccountEmailPatchOperationClientEnum[keyof typeof AllauthClientV1AccountEmailPatchOperationClientEnum];
/**
 * @export
 */
export const AllauthClientV1AccountEmailPostClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AccountEmailPostClientEnum = typeof AllauthClientV1AccountEmailPostClientEnum[keyof typeof AllauthClientV1AccountEmailPostClientEnum];
/**
 * @export
 */
export const AllauthClientV1AccountEmailPutOperationClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AccountEmailPutOperationClientEnum = typeof AllauthClientV1AccountEmailPutOperationClientEnum[keyof typeof AllauthClientV1AccountEmailPutOperationClientEnum];
