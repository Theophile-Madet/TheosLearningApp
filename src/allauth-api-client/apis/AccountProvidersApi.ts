/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
	AllauthClientV1AccountProvidersDeleteRequest,
	AllauthClientV1AccountProvidersGet200Response
} from '../models/index';
import {
	AllauthClientV1AccountProvidersDeleteRequestToJSON,
	AllauthClientV1AccountProvidersGet200ResponseFromJSON
} from '../models/index';

export interface AllauthClientV1AccountProvidersDeleteOperationRequest {
	client: AllauthClientV1AccountProvidersDeleteClientEnum;
	xSessionToken?: string;
	allauthClientV1AccountProvidersDeleteRequest?: AllauthClientV1AccountProvidersDeleteRequest;
}

export interface AllauthClientV1AccountProvidersGetRequest {
	client: AllauthClientV1AccountProvidersGetClientEnum;
	xSessionToken?: string;
}

/**
 *
 */
export class AccountProvidersApi extends runtime.BaseAPI {

	/**
	 * Disconnect a third-party provider account, returning the remaining accounts that are still connected. The disconnect is not allowed if it would leave the account unusable. For example, if no password was set up yet.
	 * Disconnect a third-party provider account
	 */
	async allauthClientV1AccountProvidersDeleteRaw(requestParameters: AllauthClientV1AccountProvidersDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AccountProvidersGet200Response>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AccountProvidersDelete().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/account/providers`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'DELETE',
			headers: headerParameters,
			query: queryParameters,
			body: AllauthClientV1AccountProvidersDeleteRequestToJSON(requestParameters['allauthClientV1AccountProvidersDeleteRequest'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AccountProvidersGet200ResponseFromJSON(jsonValue));
	}

	/**
	 * Disconnect a third-party provider account, returning the remaining accounts that are still connected. The disconnect is not allowed if it would leave the account unusable. For example, if no password was set up yet.
	 * Disconnect a third-party provider account
	 */
	async allauthClientV1AccountProvidersDelete(requestParameters: AllauthClientV1AccountProvidersDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AccountProvidersGet200Response> {
		const response = await this.allauthClientV1AccountProvidersDeleteRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * List the connected third-party provider accounts
	 */
	async allauthClientV1AccountProvidersGetRaw(requestParameters: AllauthClientV1AccountProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllauthClientV1AccountProvidersGet200Response>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AccountProvidersGet().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (requestParameters['xSessionToken'] != null) {
			headerParameters['X-Session-Token'] = String(requestParameters['xSessionToken']);
		}

		const response = await this.request({
			path: `/_allauth/{client}/v1/account/providers`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'GET',
			headers: headerParameters,
			query: queryParameters
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AllauthClientV1AccountProvidersGet200ResponseFromJSON(jsonValue));
	}

	/**
	 * List the connected third-party provider accounts
	 */
	async allauthClientV1AccountProvidersGet(requestParameters: AllauthClientV1AccountProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllauthClientV1AccountProvidersGet200Response> {
		const response = await this.allauthClientV1AccountProvidersGetRaw(requestParameters, initOverrides);
		return await response.value();
	}

}

/**
 * @export
 */
export const AllauthClientV1AccountProvidersDeleteOperationClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AccountProvidersDeleteOperationClientEnum = typeof AllauthClientV1AccountProvidersDeleteOperationClientEnum[keyof typeof AllauthClientV1AccountProvidersDeleteOperationClientEnum];
/**
 * @export
 */
export const AllauthClientV1AccountProvidersGetClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AccountProvidersGetClientEnum = typeof AllauthClientV1AccountProvidersGetClientEnum[keyof typeof AllauthClientV1AccountProvidersGetClientEnum];
