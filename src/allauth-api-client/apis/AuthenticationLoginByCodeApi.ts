/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
	AuthenticatedResponse,
	AuthenticationResponse,
	ConfirmLoginCode,
	ErrorResponse,
	RequestLoginCode
} from '../models/index';
import {
	AuthenticatedResponseFromJSON,
	AuthenticatedResponseToJSON,
	AuthenticationResponseFromJSON,
	AuthenticationResponseToJSON,
	ConfirmLoginCodeFromJSON,
	ConfirmLoginCodeToJSON,
	ErrorResponseFromJSON,
	ErrorResponseToJSON,
	RequestLoginCodeFromJSON,
	RequestLoginCodeToJSON
} from '../models/index';

export interface AllauthClientV1AuthCodeConfirmPostRequest {
	client: AllauthClientV1AuthCodeConfirmPostClientEnum;
	confirmLoginCode: ConfirmLoginCode;
}

export interface AllauthClientV1AuthCodeRequestPostRequest {
	client: AllauthClientV1AuthCodeRequestPostClientEnum;
	requestLoginCode: RequestLoginCode;
}

/**
 * 
 */
export class AuthenticationLoginByCodeApi extends runtime.BaseAPI {

	/**
	 * Use this endpoint to input along the received \"special\" login code.
	 * Confirm login code
	 */
	async allauthClientV1AuthCodeConfirmPostRaw(requestParameters: AllauthClientV1AuthCodeConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedResponse>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AuthCodeConfirmPost().'
			);
		}

		if (requestParameters['confirmLoginCode'] == null) {
			throw new runtime.RequiredError(
				'confirmLoginCode',
				'Required parameter "confirmLoginCode" was null or undefined when calling allauthClientV1AuthCodeConfirmPost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request({
			path: `/_allauth/{client}/v1/auth/code/confirm`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: ConfirmLoginCodeToJSON(requestParameters['confirmLoginCode'])
		}, initOverrides);

		return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedResponseFromJSON(jsonValue));
	}

	/**
	 * Use this endpoint to input along the received \"special\" login code.
	 * Confirm login code
	 */
	async allauthClientV1AuthCodeConfirmPost(requestParameters: AllauthClientV1AuthCodeConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedResponse> {
		const response = await this.allauthClientV1AuthCodeConfirmPostRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Request a \"special\" login code that is sent to the user by email.
	 * Request login code
	 */
	async allauthClientV1AuthCodeRequestPostRaw(requestParameters: AllauthClientV1AuthCodeRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
		if (requestParameters['client'] == null) {
			throw new runtime.RequiredError(
				'client',
				'Required parameter "client" was null or undefined when calling allauthClientV1AuthCodeRequestPost().'
			);
		}

		if (requestParameters['requestLoginCode'] == null) {
			throw new runtime.RequiredError(
				'requestLoginCode',
				'Required parameter "requestLoginCode" was null or undefined when calling allauthClientV1AuthCodeRequestPost().'
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request({
			path: `/_allauth/{client}/v1/auth/code/request`.replace(`{${'client'}}`, encodeURIComponent(String(requestParameters['client']))),
			method: 'POST',
			headers: headerParameters,
			query: queryParameters,
			body: RequestLoginCodeToJSON(requestParameters['requestLoginCode'])
		}, initOverrides);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 * Request a \"special\" login code that is sent to the user by email.
	 * Request login code
	 */
	async allauthClientV1AuthCodeRequestPost(requestParameters: AllauthClientV1AuthCodeRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
		await this.allauthClientV1AuthCodeRequestPostRaw(requestParameters, initOverrides);
	}

}

/**
 * @export
 */
export const AllauthClientV1AuthCodeConfirmPostClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AuthCodeConfirmPostClientEnum = typeof AllauthClientV1AuthCodeConfirmPostClientEnum[keyof typeof AllauthClientV1AuthCodeConfirmPostClientEnum];
/**
 * @export
 */
export const AllauthClientV1AuthCodeRequestPostClientEnum = {
	App: 'app',
	Browser: 'browser'
} as const;
export type AllauthClientV1AuthCodeRequestPostClientEnum = typeof AllauthClientV1AuthCodeRequestPostClientEnum[keyof typeof AllauthClientV1AuthCodeRequestPostClientEnum];
