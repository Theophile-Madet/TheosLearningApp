/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';

/**
 *
 * @export
 * @interface Provider
 */
export interface Provider {
	/**
	 * The provider ID.
	 *
	 * @type {string}
	 * @memberof Provider
	 */
	id: string;
	/**
	 * The name of the provider.
	 *
	 * @type {string}
	 * @memberof Provider
	 */
	name: string;
	/**
	 * The client ID (in case of OAuth2 or OpenID Connect based providers)
	 *
	 * @type {string}
	 * @memberof Provider
	 */
	clientId?: string;
	/**
	 * The authentication flows the provider integration supports.
	 *
	 * @type {Array<string>}
	 * @memberof Provider
	 */
	flows: Array<ProviderFlowsEnum>;
}


/**
 * @export
 */
export const ProviderFlowsEnum = {
	Redirect: 'provider_redirect',
	Token: 'provider_token'
} as const;
export type ProviderFlowsEnum = typeof ProviderFlowsEnum[keyof typeof ProviderFlowsEnum];


/**
 * Check if a given object implements the Provider interface.
 */
export function instanceOfProvider(value: object): value is Provider {
	if (!('id' in value) || value['id'] === undefined) return false;
	if (!('name' in value) || value['name'] === undefined) return false;
	if (!('flows' in value) || value['flows'] === undefined) return false;
	return true;
}

export function ProviderFromJSON(json: any): Provider {
	return ProviderFromJSONTyped(json, false);
}

export function ProviderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Provider {
	if (json == null) {
		return json;
	}
	return {

		'id': json['id'],
		'name': json['name'],
		'clientId': json['client_id'] == null ? undefined : json['client_id'],
		'flows': json['flows']
	};
}

export function ProviderToJSON(value?: Provider | null): any {
	if (value == null) {
		return value;
	}
	return {

		'id': value['id'],
		'name': value['name'],
		'client_id': value['clientId'],
		'flows': value['flows']
	};
}

