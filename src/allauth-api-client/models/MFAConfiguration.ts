/* tslint:disable */
/* eslint-disable */
/**
 * django-allauth: Headless API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: info@allauth.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AuthenticatorType } from './AuthenticatorType';
import { AuthenticatorTypeFromJSON, AuthenticatorTypeToJSON } from './AuthenticatorType';

/**
 * Configuration of the Django `allauth.mfa` app.
 *
 * @export
 * @interface MFAConfiguration
 */
export interface MFAConfiguration {
	/**
	 * Matches `settings.MFA_SUPPORTED_TYPES`.
	 *
	 * @type {Array<AuthenticatorType>}
	 * @memberof MFAConfiguration
	 */
	supportedTypes: Array<AuthenticatorType>;
}

/**
 * Check if a given object implements the MFAConfiguration interface.
 */
export function instanceOfMFAConfiguration(value: object): value is MFAConfiguration {
	if (!('supportedTypes' in value) || value['supportedTypes'] === undefined) return false;
	return true;
}

export function MFAConfigurationFromJSON(json: any): MFAConfiguration {
	return MFAConfigurationFromJSONTyped(json, false);
}

export function MFAConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): MFAConfiguration {
	if (json == null) {
		return json;
	}
	return {

		'supportedTypes': ((json['supported_types'] as Array<any>).map(AuthenticatorTypeFromJSON))
	};
}

export function MFAConfigurationToJSON(value?: MFAConfiguration | null): any {
	if (value == null) {
		return value;
	}
	return {

		'supported_types': ((value['supportedTypes'] as Array<any>).map(AuthenticatorTypeToJSON))
	};
}

